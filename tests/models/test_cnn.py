import pytest
import torch as th

from tint.models import CNN


@pytest.mark.parametrize(
    [
        "units",
        "kernel_size",
        "stride",
        "padding",
        "dilation",
        "groups",
        "bias",
        "dropout",
        "norm",
        "activations",
        "pooling",
    ],
    [
        ([16, 33], 3, 2, 0, 1, 1, True, 0.0, None, "relu", None),
        (
            [16, 33],
            (3, 5),
            (2, 1),
            (4, 2),
            1,
            1,
            True,
            0.0,
            None,
            "relu",
            None,
        ),
        (
            [16, 33],
            (3, 5),
            (2, 1),
            (4, 2),
            (3, 1),
            1,
            True,
            0.0,
            None,
            "relu",
            None,
        ),
        ([10, 8, 6], 3, 1, 0, 1, 1, False, 0.0, None, "relu", None),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.1, None, "relu", None),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.0, None, "relu", None),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.0, "batch_norm_2d", "elu", None),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.0, None, "relu", "max_pool_2d"),
    ],
)
def test_init(
    units,
    kernel_size,
    stride,
    padding,
    dilation,
    groups,
    bias,
    dropout,
    norm,
    activations,
    pooling,
):
    cnn = CNN(
        units=units,
        kernel_size=kernel_size,
        stride=stride,
        padding=padding,
        dilation=dilation,
        groups=groups,
        bias=bias,
        dropout=dropout,
        norm=norm,
        activations=activations,
        pooling=pooling,
    )
    assert isinstance(cnn, CNN)


@pytest.mark.parametrize(
    [
        "units",
        "kernel_size",
        "stride",
        "padding",
        "dilation",
        "groups",
        "bias",
        "dropout",
        "norm",
        "activations",
        "pooling",
        "outputs",
    ],
    [
        ([16, 33], 3, 2, 0, 1, 1, True, 0.0, None, "relu", None, (8, 396)),
        (
            [16, 33],
            (3, 5),
            (2, 1),
            (4, 2),
            1,
            1,
            True,
            0.0,
            None,
            "relu",
            None,
            (8, 1848),
        ),
        (
            [16, 33],
            (3, 5),
            (2, 1),
            (4, 2),
            (3, 1),
            1,
            True,
            0.0,
            None,
            "relu",
            None,
            (8, 990),
        ),
        ([10, 8, 6], 3, 1, 0, 1, 1, False, 0.0, None, "relu", None, (8, 120)),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.1, None, "relu", None, (8, 120)),
        ([10, 8, 6], 3, 1, 0, 1, 1, True, 0.0, None, "relu", None, (8, 120)),
        (
            [10, 8, 6],
            3,
            1,
            0,
            1,
            1,
            True,
            0.0,
            "batch_norm_2d",
            "elu",
            None,
            (8, 120),
        ),
        (
            [10, 8, 6],
            3,
            1,
            0,
            1,
            1,
            True,
            0.0,
            None,
            "relu",
            "max_pool_2d",
            (8, 6),
        ),
    ],
)
def test_cnn(
    units,
    kernel_size,
    stride,
    padding,
    dilation,
    groups,
    bias,
    dropout,
    norm,
    activations,
    pooling,
    outputs,
):
    cnn = CNN(
        units=units,
        kernel_size=kernel_size,
        stride=stride,
        padding=padding,
        dilation=dilation,
        groups=groups,
        bias=bias,
        dropout=dropout,
        norm=norm,
        activations=activations,
        pooling=pooling,
    )
    x = th.rand(8, units[0], 9, 8)
    out = cnn.forward(x)
    assert tuple(out.shape) == outputs
